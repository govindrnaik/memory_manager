[
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTMLResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "HTMLResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "Jinja2Templates",
        "importPath": "fastapi.templating",
        "description": "fastapi.templating",
        "isExtraImport": true,
        "detail": "fastapi.templating",
        "documentation": {}
    },
    {
        "label": "Jinja2Templates",
        "importPath": "fastapi.templating",
        "description": "fastapi.templating",
        "isExtraImport": true,
        "detail": "fastapi.templating",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "TaskTable",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "TaskModel",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "routes.tasks",
        "description": "routes.tasks",
        "isExtraImport": true,
        "detail": "routes.tasks",
        "documentation": {}
    },
    {
        "label": "StaticFiles",
        "importPath": "fastapi.staticfiles",
        "description": "fastapi.staticfiles",
        "isExtraImport": true,
        "detail": "fastapi.staticfiles",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "create_task",
        "kind": 2,
        "importPath": "routes.tasks",
        "description": "routes.tasks",
        "peekOfCode": "def create_task(task: TaskModel, db: Session = Depends(get_db)):\n    db_task = TaskTable(**task.dict())\n    db.add(instance=db_task)\n    db.commit()\n    db.refresh(db_task)\n    return task\n@router.get(\"/tasks/{task_id}\")\nasync def read_task(task_id: int = 1, db: Session = Depends(get_db)):\n    print(task_id)\n    task = db.query(TaskTable).filter(TaskTable.id == task_id).first()",
        "detail": "routes.tasks",
        "documentation": {}
    },
    {
        "label": "get_all_tasks",
        "kind": 2,
        "importPath": "routes.tasks",
        "description": "routes.tasks",
        "peekOfCode": "def get_all_tasks(db: Session = Depends(dependency=get_db)):\n    tasks = db.query(TaskTable).all()\n    print(tasks)\n    return tasks\n@router.get(\"/\", response_class=HTMLResponse)\nasync def read_root(request: Request, db: Session = Depends(dependency=get_db)):\n    tasks = db.query(TaskTable).all()\n    return templates.TemplateResponse(\"tasks.html\", {\"request\": request, \"tasks\": tasks})",
        "detail": "routes.tasks",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.tasks",
        "description": "routes.tasks",
        "peekOfCode": "router = APIRouter()\ntemplates = Jinja2Templates(directory=\"templates\")\n# Endpoint to create a task\n@router.post(\"/task/\", response_model=TaskModel)\ndef create_task(task: TaskModel, db: Session = Depends(get_db)):\n    db_task = TaskTable(**task.dict())\n    db.add(instance=db_task)\n    db.commit()\n    db.refresh(db_task)\n    return task",
        "detail": "routes.tasks",
        "documentation": {}
    },
    {
        "label": "templates",
        "kind": 5,
        "importPath": "routes.tasks",
        "description": "routes.tasks",
        "peekOfCode": "templates = Jinja2Templates(directory=\"templates\")\n# Endpoint to create a task\n@router.post(\"/task/\", response_model=TaskModel)\ndef create_task(task: TaskModel, db: Session = Depends(get_db)):\n    db_task = TaskTable(**task.dict())\n    db.add(instance=db_task)\n    db.commit()\n    db.refresh(db_task)\n    return task\n@router.get(\"/tasks/{task_id}\")",
        "detail": "routes.tasks",
        "documentation": {}
    },
    {
        "label": "TaskTable",
        "kind": 6,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "class TaskTable(Base):\n    __tablename__ = 'tasks'\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String)\n    description = Column(String)\n    status = Column(Boolean, default=False)",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\nclass TaskTable(Base):\n    __tablename__ = 'tasks'\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String)",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "DATABASE_URL = \"postgresql+psycopg2://postgres:postgres@localhost:5432/todo\"\nSQLALCHEMY_DATABASE_URL = \"postgresql+psycopg2://postgres:postgres@localhost:5432/postgres\"\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nBase = declarative_base()\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = \"postgresql+psycopg2://postgres:postgres@localhost:5432/postgres\"\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nBase = declarative_base()\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\nBase = declarative_base()\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\nclass TaskTable(Base):",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "Base = declarative_base()\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\nclass TaskTable(Base):\n    __tablename__ = 'tasks'",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\nclass TaskTable(Base):\n    __tablename__ = 'tasks'\n    id = Column(Integer, primary_key=True, index=True)",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\ntemplates = Jinja2Templates(directory=\"templates\")\napp.include_router(router=tasks)\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(\"main:app\", host=\"0.0.0.0\",reload=True, port=8000)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "templates",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "templates = Jinja2Templates(directory=\"templates\")\napp.include_router(router=tasks)\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(\"main:app\", host=\"0.0.0.0\",reload=True, port=8000)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "TaskModel",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class TaskModel(BaseModel):\n    title: str\n    description: str\n    status: bool\nclass User(BaseModel):\n    username: str\n    email: str\n    password: str\n    is_active: bool = True\n    is_superuser: bool = False",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class User(BaseModel):\n    username: str\n    email: str\n    password: str\n    is_active: bool = True\n    is_superuser: bool = False",
        "detail": "models",
        "documentation": {}
    }
]